#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2020, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

# Wrapper Python class to use zdairi lib to run benchmarks on a Zeppelin REST API
# -------------------------------------------------------------------------------



import os
import requests
import subprocess
import time
from os import listdir
from os.path import isfile, join


class Benchmarker(object):

    def __init__(self, directory):
        self.notebooks = [directory + "/" + f for f in listdir(directory) if isfile(join(directory, f))]

    def run_notebook(self, filepath):
        start = time.time()
        print(filepath)
        # Make notebook
        batcmd="zdairi notebook create --filepath " + filepath
        pipe = subprocess.Popen(batcmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)
        text = pipe.communicate()[0].decode().split("\n")[2]
        notebookid = text.split(": ")[1]

        # Run notebook
        batcmd="zdairi notebook run --notebook " + notebookid
        print(batcmd)
        pipe = subprocess.Popen(batcmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)
        text = pipe.communicate()[0].decode()
        print(text)

        # Delete notebook
        batcmd="zdairi notebook delete --notebook " + notebookid
        pipe = subprocess.Popen(batcmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)
        #text = pipe.communicate()[0].decode()
        #print(text)
        end = time.time()
        print(end - start)

    def run(self):
        print(self.notebooks)
        for notebook in self.notebooks:
            self.run_notebook(notebook)

if __name__ == '__main__':
    Benchmarker("/home/stelios/projects/zdairi/notebooks").run()
