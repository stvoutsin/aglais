#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2020, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#


    Target:

        Tidy up our Docker images, start from a common base and add all the extras we need.

    Result:

        Success - images built OK.

    TODO:

        Split out the Java and Python install into a common base for all the images.

        Modify the Python libraries pip install to use a requirements.txt

        Make the requirements.txt a symlink to a common file higehr up the tree.

        Why do we need to use the Anaconda install of Python ?
        https://towardsdatascience.com/which-python-package-manager-should-you-use-d0fd0789a250

            Virtualenv and Anaconda create environments to isolate different libraries and versions.
            OK if you want multiple dev environments on the same laptop.
            We only want one environment in our container - that's why we are using a container.

            Anaconda also introduces its own package manager, called conda, from where you can install libraries.
            .. our Dockerfile installs everything from pip, so why use conda ?


# -----------------------------------------------------
# Move the Zeppelin Dockerfiles.
#[user@desktop]

    source "${HOME}/aglais.env"
    pushd "${AGLAIS_CODE}"
        pushd experiments

            mkdir kubernetes/docker/zeppelin/base
            git mv zrq/zeppelin/docker/Dockerbase \
                kubernetes/docker/zeppelin/base/Dockerfile

            mkdir kubernetes/docker/zeppelin/main
            git mv zrq/zeppelin/docker/Dockerfile \
                kubernetes/docker/zeppelin/main/Dockerfile

            git mv zrq/zeppelin/docker/log4j.properties \
                kubernetes/docker/zeppelin/main

            mkdir kubernetes/docker/zeppelin/dev
            git mv zrq/zeppelin/docker/Dockermod \
                kubernetes/docker/zeppelin/dev/Dockerfile

            mkdir kubernetes/docker/zeppelin/dev/conf
            git mv zrq/zeppelin/conf/shiro.ini \
                kubernetes/docker/zeppelin/dev/conf

            mkdir kubernetes/docker/zeppelin/dev/k8s
            mkdir kubernetes/docker/zeppelin/dev/k8s/interpreter
            git mv zrq/zeppelin/k8s/interpreter/100-interpreter-spec.yaml \
                kubernetes/docker/zeppelin/dev/k8s/interpreter

            mkdir kubernetes/docker/zeppelin/dev/lib
            git mv zrq/zeppelin/lib/empty \
                kubernetes/docker/zeppelin/dev/lib/empty
            git mv zrq/zeppelin/.gitignore \
                kubernetes/docker/zeppelin/dev/.gitignore

        popd
    popd


# -----------------------------------------------------
# Clean the podmane image cache..
#[user@desktop]

    podman rmi -f $(
        podman images -q
        )


# -----------------------------------------------------
# Build our Zeppelin code.
#[user@desktop]

    source "${HOME}/aglais.env"
    pushd  "${ZEPPELIN_CODE:?}"

        mvn clean package -D skipTests -P build-distr -P hadoop3

    popd

    source "${HOME}/aglais.env"
    pushd  "${ZEPPELIN_CODE:?}"

        pushd zeppelin-zengine
            mvn clean install -D skipTests -P hadoop3
        popd

        pushd zeppelin-distribution
            mvn clean package -D skipTests -P build-distr -P hadoop3
        popd

    popd

# -----------------------------------------------------
# Identify the build result.
#[user@desktop]

    source "${HOME}/aglais.env"

    zepversion=$(
        sed -n '
            s/^.*<version project="zeppelin">\(.*\)<\/version>.*$/\1/ p
            ' "${ZEPPELIN_CODE:?}/pom.xml"
        )

    zepresult=zeppelin-distribution/target/zeppelin-${zepversion:?}/zeppelin-${zepversion:?}


# -----------------------------------------------------
# Build the Zeppelin base image.
#[user@desktop]

    source "${HOME}/aglais.env"
    buildtag=$(date '+%Y%m%d-%H%M%S')
    buildtime=$(date '+%Y-%m-%dT%H:%M:%S')

    buildah bud \
        --format docker \
        --tag aglais/zeppelin-base:latest \
        --tag aglais/zeppelin-base:${buildtag:?} \
        --build-arg "buildtag=${buildtag:?}" \
        --build-arg "buildtime=${buildtime:?}" \
        "${AGLAIS_CODE:?}/experiments/kubernetes/docker/zeppelin/base"

    >   STEP 1: FROM debian:10.7-slim
    >   Resolved short name "debian" to a recorded short-name alias (origin: /etc/containers/registries.conf.d/shortnames.conf)
    >   Getting image source signatures
    >   Copying blob 6ec7b7d162b2 done
    >   Copying config 4a9cd57610 done
    >   Writing manifest to image destination
    >   Storing signatures
    >   STEP 2: MAINTAINER Dave Morris <docker-admin@metagrid.co.uk>
    >   STEP 3: ARG buildtag
    >   STEP 4: ARG buildtime
    >   STEP 5: LABEL maintainer="Dave Morris <docker-admin@metagrid.co.uk>"
    >   STEP 6: LABEL buildtag="${buildtag}"
    >   STEP 7: LABEL buildtime="${buildtime}"
    >   STEP 8: LABEL gitrepo="https://github.com/wfau/aglais"
    >   STEP 9: ENV LOG_TAG="[ZEPPELIN]:"
    >   STEP 10: ENV LANG=en_GB.UTF-8
    >   STEP 11: ENV DEBIAN_FRONTEND=noninteractive
    >   STEP 12: RUN echo "$LOG_TAG configure locale" && ....
    >   ....
    >   ....
    >   STEP 22: RUN echo "$LOG_TAG Cleanup" && ....
    >   ....
    >   STEP 23: COMMIT aglais/zeppelin-base:latest
    >   ....


# -----------------------------------------------------
# Build the Zeppelin main image.
#[user@desktop]

    buildsrc=${buildtag:?}
    buildtime=$(date '+%Y-%m-%dT%H:%M:%S')

    buildah bud \
        --format docker \
        --tag aglais/zeppelin-main:latest \
        --tag aglais/zeppelin-main:${buildtag:?} \
        --build-arg "buildsrc=${buildsrc:?}" \
        --build-arg "buildtag=${buildtag:?}" \
        --build-arg "buildtime=${buildtime:?}" \
        --file "${AGLAIS_CODE:?}/experiments/kubernetes/docker/zeppelin/main/Dockerfile" \
        "${ZEPPELIN_CODE:?}/${zepresult:?}"


    >   STEP 1: FROM aglais/zeppelin-base:20201219-152019
    >   STEP 2: MAINTAINER Dave Morris <docker-admin@metagrid.co.uk>
    >   STEP 3: ARG buildtag
    >   STEP 4: ARG buildtime
    >   STEP 5: LABEL maintainer="Dave Morris <docker-admin@metagrid.co.uk>"
    >   STEP 6: LABEL buildtag="${buildtag}"
    >   STEP 7: LABEL buildtime="${buildtime}"
    >   STEP 8: LABEL gitrepo="https://github.com/wfau/aglais"
    >   STEP 9: ENV Z_HOME="/zeppelin"
    >   STEP 10: ENV ZEPPELIN_ADDR="0.0.0.0"
    >   STEP 11: RUN mkdir -p         ${Z_HOME}         ${Z_HOME}/run         ${Z_HOME}/logs ....
    >   STEP 12: RUN chgrp root  /etc/passwd &&     chmod ug+rw /etc/passwd
    >   STEP 13: COPY conf/log4j.properties ${Z_HOME}/conf/
    >   STEP 14: USER 1000
    >   STEP 15: EXPOSE 8080
    >   STEP 16: ENTRYPOINT [ "/usr/bin/tini", "--" ]
    >   STEP 17: WORKDIR ${Z_HOME}
    >   STEP 18: CMD ["bin/zeppelin.sh"]
    >   STEP 19: COMMIT aglais/zeppelin-main:latest
    >   Getting image source signatures
    >   Copying blob 87c8a1d8f54f skipped: already exists
    >   Copying blob 5dd7041cc76a skipped: already exists
    >   Copying blob b32803faf9fd done
    >   Copying config 7c912069ab done
    >   Writing manifest to image destination
    >   Storing signatures
    >   --> 7c912069ab4
    >   7c912069ab40fbb305dd99766058cfb4fb1707f79f19f400c88b8c266e6558ca
    >   ....
    >   ....


# -----------------------------------------------------
# Build the Zeppelin dev image.
#[user@desktop]

    buildsrc=${buildtag:?}
    buildtime=$(date '+%Y-%m-%dT%H:%M:%S')

    buildah bud \
        --format docker \
        --tag aglais/zeppelin-dev:latest \
        --tag aglais/zeppelin-dev:${buildtag:?} \
        --build-arg "buildsrc=${buildsrc:?}" \
        --build-arg "buildtag=${buildtag:?}" \
        --build-arg "buildtime=${buildtime:?}" \
        "${AGLAIS_CODE:?}/experiments/kubernetes/docker/zeppelin/dev"

    >   ....
    >   ....
    >
    >   STEP 1: FROM aglais/zeppelin-main:20201219-152019
    >   STEP 2: MAINTAINER Dave Morris <docker-admin@metagrid.co.uk>
    >   STEP 3: ARG buildtag
    >   STEP 4: ARG buildtime
    >   STEP 5: LABEL maintainer="Dave Morris <docker-admin@metagrid.co.uk>"
    >   STEP 6: LABEL buildtag="${buildtag}"
    >   STEP 7: LABEL buildtime="${buildtime}"
    >   STEP 8: LABEL gitrepo="https://github.com/wfau/aglais"
    >   STEP 9: COPY tmp/lib/* /zeppelin/lib
    >   STEP 10: COPY k8s/interpreter/100-interpreter-spec.yaml /zeppelin/k8s/interpreter/
    >   STEP 11: COPY conf/shiro.ini /zeppelin/conf/shiro.ini
    >   STEP 12: COMMIT aglais/zeppelin-dev:latest
    >   Getting image source signatures
    >   Copying blob 87c8a1d8f54f skipped: already exists
    >   Copying blob 5dd7041cc76a skipped: already exists
    >   Copying blob b32803faf9fd skipped: already exists
    >   Copying blob b9458226e6b1 done
    >   Copying config ec8876c0b0 done
    >   Writing manifest to image destination
    >   Storing signatures
    >   --> ec8876c0b07
    >   ec8876c0b07948a17bfe0d57f42a2445c361dbd060c1e8a7b87f3d998cc10ebc
    >


# -----------------------------------------------------
# Fixes involved ....


    https://serverfault.com/questions/362903/how-do-you-set-a-locale-non-interactively-on-debian-ubuntu
    https://serverfault.com/a/801162


    gedit "${AGLAIS_CODE:?}/experiments/kubernetes/docker/zeppelin/base/Dockerfile"

    +   # Change from Ubuntu to Debian
    +   # https://wiki.debian.org/DebianReleases
    ~   FROM debian:10.7-slim


    +   # Set the locale
    +   # https://serverfault.com/questions/362903/how-do-you-set-a-locale-non-interactively-on-debian-ubuntu
    +   ENV DEBIAN_FRONTEND=noninteractive
    +   RUN echo "$LOG_TAG configure locale" && \
    +       apt-get -y update && \
    +       apt-get install -y locales && \
    +       echo "$LANG UTF-8" > /etc/locale.gen && \
    +       dpkg-reconfigure --frontend=noninteractive locales && \
    +       update-locale LANG=$LANG


    +   # Create missing man directories.
    +   # https://github.com/debuerreotype/debuerreotype/issues/10
    +   # https://github.com/libvirt/libvirt-ci/commit/9cd2f73597e1599330e9657d51200eb0d2052bb2
    +   RUN mkdir -p /usr/share/man/man1


    +   # Update from openjdk-8-jdk to openjdk-11-jdk
    +   # https://stackoverflow.com/questions/57031649/how-to-install-openjdk-8-jdk-on-debian-10-buster
    +   # https://serverfault.com/questions/974992/why-isnt-there-a-openjdk-8-jdk-package-on-debian-anymore
    ~   ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
    ~   RUN echo "$LOG_TAG Install java11" && \
            apt-get -y update && \
    ~       apt-get install -y openjdk-11-jdk && \
            rm -rf /var/lib/apt/lists/*

    +   # Add libgit2-dev dependency for `gert`.
    ~   apt-get -y install libcurl4-gnutls-dev libssl-dev libgit2-dev && \


# -----------------------------------------------------
# Push our new Zeppelin images to the registry.
#[user@desktoop]

    buildah login \
        --username $(secret docker.io.user) \
        --password $(secret docker.io.pass) \
        registry-1.docker.io

    buildah push "aglais/zeppelin-base:${buildtag:?}"
    buildah push "aglais/zeppelin-base:latest"

    buildah push "aglais/zeppelin-main:${buildtag:?}"
    buildah push "aglais/zeppelin-main:latest"

    buildah push "aglais/zeppelin-dev:${buildtag:?}"
    buildah push "aglais/zeppelin-dev:latest"


    #
    # Docker hub is really slow at accepting pushes.
    # Added to which pushing several Gbytes up the wrong end of an ADSL line is painful.
    # TODO reduce the size of our images.
    # TODO move the image build into the cloud
    #


