#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2020, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

    Target:

        Create a new configuration that uses Drupal as the OAuth server.

    Source:

        notes/zrq/20201210-03-openssl-cert.txt
        notes/zrq/20201210-01-drupal-oauth.txt

        https://www.drupal.org/project/oauth2_server
        https://www.drupal.org/node/1938218

        https://www.drupal.org/project/simple_oauth
        https://www.drupal.org/project/oauth_server_sso
        https://www.drupal.org/project/infrastructure/issues/2908988


    Result:

        Work in progress ...


# -----------------------------------------------------
# Create some new hostnames to work with ....

    aglais-001  A       128.232.227.125
    ....
    gwerf       CNAME   aglais-001.metagrid.xyz.
    amplint     CNAME   aglais-001.metagrid.xyz.
    kumber      CNAME   aglais-001.metagrid.xyz.
    pinert      CNAME   aglais-001.metagrid.xyz.





# -----------------------------------------------------
# Create a container to work.
#[user@desktop]

    source "${HOME:?}/aglais.env"

    podman run \
        --rm \
        --tty \
        --interactive \
        --name kubernator \
        --hostname kubernator \
        --env "clouduser=${AGLAIS_USER:?}" \
        --env "cloudname=${AGLAIS_CLOUD:?}" \
        --volume "${AGLAIS_CODE:?}/experiments/openstack:/openstack:ro,z" \
        --volume "${AGLAIS_CODE:?}/experiments/kubernetes:/kubernetes:rw,z" \
        --volume "${HOME:?}/clouds.yaml:/etc/openstack/clouds.yaml:ro,z" \
        atolmis/openstack-client:latest \
        bash


# -----------------------------------------------------
# -----------------------------------------------------

    Get the cluster connection details.
    See notes/zrq/20201209-03-kubectl-login.txt

# -----------------------------------------------------
# -----------------------------------------------------
# Install the openssl tools.
#[user@kubernator]

    dnf install -y openssl

    >   ....
    >   ....


# -----------------------------------------------------
# Create a new SSL certificate with the new names.
# https://support.citrix.com/article/CTX135602
#[user@kubernator]

    certname=tls-secret

    cat > "/tmp/${certname:?}.cfg" << EOF
[req]
distinguished_name = req_distinguished_name
x509_extensions = v3_req
prompt = no
[req_distinguished_name]
O = Edinburgh University
OU = The Wide Field Astronomy Unit (WFAU)
CN = https://github.com/wfau/aglais
[v3_req]
keyUsage = keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names
[alt_names]
DNS.1 = drupal.metagrid.xyz
DNS.2 = zeppelin.metagrid.xyz
DNS.3 = valeria.metagrid.xyz
DNS.4 = vernon.metagrid.xyz
DNS.5 = gwerf.metagrid.xyz
DNS.6 = amplint.metagrid.xyz
DNS.7 = kumber.metagrid.xyz
DNS.8 = pinert.metagrid.xyz
EOF

    openssl req \
        -x509 \
        -nodes \
        -sha256 \
        -days 365 \
        -newkey rsa:2048 \
        -keyout "/tmp/${certname:?}.key" \
        -out    "/tmp/${certname:?}.crt" \
        -config "/tmp/${certname:?}.cfg" \
        -extensions 'v3_req'

    >   Generating a RSA private key
    >   .........................................................+++++
    >   .......+++++
    >   writing new private key to '/tmp/tls-secret.key'
    >   -----


# -----------------------------------------------------
# Check our SSL key.
# https://support.citrix.com/article/CTX135602
#[user@kubernator]

    openssl \
        x509 \
        -in "/tmp/${certname:?}.crt" \
        -noout \
        -text

    >   Certificate:
    >       Data:
    >           Version: 3 (0x2)
    >           Serial Number:
    >               ....
    >           Signature Algorithm: sha256WithRSAEncryption
    >           Issuer: O = Edinburgh University, OU = The Wide Field Astronomy Unit (WFAU), CN = https://github.com/wfau/aglais
    >           Validity
    >               Not Before: Dec 10 18:21:00 2020 GMT
    >               Not After : Dec 10 18:21:00 2021 GMT
    >           Subject: O = Edinburgh University, OU = The Wide Field Astronomy Unit (WFAU), CN = https://github.com/wfau/aglais
    >           Subject Public Key Info:
    >               Public Key Algorithm: rsaEncryption
    >                   RSA Public-Key: (2048 bit)
    >                   Modulus:
    >                       ....
    >                       ....
    >                   Exponent: 65537 (0x10001)
    >           X509v3 extensions:
    >               X509v3 Key Usage:
    >                   Key Encipherment, Data Encipherment
    >               X509v3 Extended Key Usage:
    >                   TLS Web Server Authentication
    >               X509v3 Subject Alternative Name:
    >                   DNS:drupal.metagrid.xyz, DNS:zeppelin.metagrid.xyz, DNS:valeria.metagrid.xyz, DNS:vernon.metagrid.xyz, DNS:gwerf.metagrid.xyz, DNS:amplint.metagrid.xyz, DNS:kumber.metagrid.xyz, DNS:pinert.metagrid.xyz
    >       Signature Algorithm: sha256WithRSAEncryption
    >            ....
    >            ....


# -----------------------------------------------------
# Store our keys in a Kubernetes secret.
# https://github.com/kubernetes/ingress-nginx/blob/master/docs/examples/PREREQUISITES.md#tls-certificates
#[user@kubernator]

    kubectl delete secret \
        "${certname:?}"

    >   secret "tls-secret" deleted


    kubectl create secret \
        tls \
        "${certname:?}" \
            --key  "/tmp/${certname:?}.key" \
            --cert "/tmp/${certname:?}.crt"

    >   secret/tls-secret created


    kubectl describe \
        secret \
            "${certname:?}"

    >   Name:         tls-secret
    >   Namespace:    default
    >   Labels:       <none>
    >   Annotations:  <none>
    >   
    >   Type:  kubernetes.io/tls
    >   
    >   Data
    >   ====
    >   tls.crt:  1570 bytes
    >   tls.key:  1704 bytes


    kubectl get \
        --output json \
        secret \
            "${certname:?}"

    >   {
    >       "apiVersion": "v1",
    >       "data": {
    >           "tls.crt": "LS0t....Cg==",
    >           "tls.key": "LS0t....LS0K"
    >       },
    >       "kind": "Secret",
    >       "metadata": {
    >           "creationTimestamp": "2020-12-10T18:22:54Z",
    >           "name": "tls-secret",
    >           "namespace": "default",
    >           "resourceVersion": "1263247",
    >           "selfLink": "/api/v1/namespaces/default/secrets/tls-secret",
    >           "uid": "7ba0b9b1-3de0-4ed7-b72f-b02c4c6545ed"
    >       },
    >       "type": "kubernetes.io/tls"
    >   }

# -----------------------------------------------------
# Check the existing Google OAuth is still working.
#[user@kubernator]

    curl --head --insecure "https://vernon.metagrid.xyz/test"

    >   HTTP/2 302
    >   date: Thu, 10 Dec 2020 18:25:41 GMT
    >   content-type: text/html
    >   content-length: 138
    >   location: https://vernon.metagrid.xyz/agromulupt/start?rd=%2Ftest

    curl --head --insecure 'https://vernon.metagrid.xyz/agromulupt/start?rd=%2Ftest'

    >   HTTP/2 302
    >   date: Thu, 10 Dec 2020 18:26:11 GMT
    >   content-type: text/html; charset=utf-8
    >   location: https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force ....
    >   cache-control: no-cache, no-store, must-revalidate, max-age=0
    >   expires: Thu, 01 Jan 1970 00:00:00 UTC
    >   set-cookie: _oauth2_proxy_csrf=0ce5f9293380b511bf7307bad240584b; Path=/; Expires=Thu, 17 Dec 2020 18:26:11 GMT; HttpOnly; Secure; SameSite
    >   strict-transport-security: max-age=15724800; includeSubDomains


# -----------------------------------------------------
# Configure a new oauth2_proxy Service to use Drupal.
#[user@kubernator]

    # Drupal endpoint URLs
    # https://www.drupal.org/project/infrastructure/issues/2908988
    # drupal]/oauth2/{token|authenticate|UserInfo}

    hostname=gwerf.metagrid.xyz
    authpath=cribnart

    OAUTH2_PROXY_SERVER_BASE=https://drupal.metagrid.xyz/
    OAUTH2_PROXY_SERVER_AUTH=https://drupal.metagrid.xyz/oauth2/authenticate

    OAUTH2_PROXY_REDIRECT_URL=https://gwerf.metagrid.xyz/cribnart/callback
    OAUTH2_PROXY_CLIENT_ID=drupal-oauth-proxy-ident
    OAUTH2_PROXY_CLIENT_SECRET=drupal-oauth-proxy-secret
    OAUTH2_PROXY_COOKIE_SECRET=$(
        python -c 'import os,base64; print(base64.b64encode(os.urandom(16)).decode("ascii"))'
        )

    cat > /tmp/drupal-oauth-proxy.yaml << EOF
---
apiVersion: v1
kind: Service
metadata:
 labels:
   k8s-app: drupal-oauth-proxy
 name: drupal-oauth-proxy
 namespace: default
spec:
 ports:
 - name: http
   port: 4180
   protocol: TCP
   targetPort: 4180
 selector:
   k8s-app: drupal-oauth-proxy
---
apiVersion: apps/v1
kind: Deployment
metadata:
 labels:
   k8s-app: drupal-oauth-proxy
 name: drupal-oauth-proxy
 namespace: default
spec:
 replicas: 1
 selector:
   matchLabels:
     k8s-app: drupal-oauth-proxy
 template:
   metadata:
     labels:
       k8s-app: drupal-oauth-proxy
   spec:
     containers:
     - args:
#       - --provider=google
#       - --email-domain=*
#       - --http-address=0.0.0.0:4180
#       - --proxy-prefix=/${authpath:?}
#       - --set-xauthrequest=true
        - --provider oidc
        - --client-id ${OAUTH2_PROXY_CLIENT_ID:?}
        - --client-secret ${OAUTH2_PROXY_CLIENT_SECRET:?}
        - --redirect-url ${OAUTH2_PROXY_REDIRECT_URL:?}
        - --skip-oidc-discovery
        - --login-url ${OAUTH2_PROXY_SERVER_AUTH:?}
        - --cookie-secure=false
#       - --email-domain example.com
#       env:
#       - name:    OAUTH2_PROXY_CLIENT_ID
#         value: ${OAUTH2_PROXY_CLIENT_ID}
#       - name:    OAUTH2_PROXY_CLIENT_SECRET
#         value: ${OAUTH2_PROXY_CLIENT_SECRET}
#       - name:    OAUTH2_PROXY_COOKIE_SECRET
#         value: ${OAUTH2_PROXY_COOKIE_SECRET}
       image: quay.io/oauth2-proxy/oauth2-proxy:latest
       imagePullPolicy: Always
       name: drupal-oauth-proxy
       ports:
       - containerPort: 4180
         protocol: TCP
EOF


# -----------------------------------------------------
# Deploy the Drupal OAuth proxy.
#[user@kubernator]

    kubectl create \
        --filename /tmp/drupal-oauth-proxy.yaml

    >   service/drupal-oauth-proxy created
    >   deployment.apps/drupal-oauth-proxy created


# -----------------------------------------------------
# Configure the Drupal OAuth Ingress.
#[user@kubernator]

    #
    # WARNING The auth-url and auth-signin URLs contain '$' values.
    # WARNING If bash tries to fill them in, they will end up blank.
    #   https:///oauth2/auth
    #   https:///oauth2/start?rd
    # WARNING This disables the authentication, leaving the protected resource exposed.
    #

    cat > /tmp/drupal-oauth-ingress.yaml << EOF
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
 annotations:
   nginx.ingress.kubernetes.io/auth-url:    "https://\$host/${authpath:?}/auth"
   nginx.ingress.kubernetes.io/auth-signin: "https://\$host/${authpath:?}/start?rd=\$escaped_request_uri"
   nginx.ingress.kubernetes.io/auth-response-headers: "x-auth-request-user, x-auth-request-email"
 name: drupal-oauth-protected
 namespace: default
spec:
 rules:
 - host: ${hostname:?}
   http:
     paths:
     - path: /
       backend:
         serviceName: http-svc
         servicePort: 80
 tls:
 - hosts:
   - ${hostname:?}
   secretName: ${certname:?}
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
 name: drupal-oauth-protector
 namespace: default
spec:
 rules:
 - host: ${hostname:?}
   http:
     paths:
     - path: /${authpath:?}
       backend:
         serviceName: drupal-oauth-proxy
         servicePort: 4180

 tls:
 - hosts:
   - ${hostname:?}
   secretName: ${certname:?}
EOF


# -----------------------------------------------------
# Deploy the OAuth Ingress connectors.
#[user@kubernator]

    kubectl apply \
        --filename /tmp/drupal-oauth-ingress.yaml

    >   ingress.networking.k8s.io/drupal-oauth-protected created
    >   ingress.networking.k8s.io/drupal-oauth-protector created


    kubectl describe \
        ingress drupal-oauth-protected

    >   Name:             drupal-oauth-protected
    >   Namespace:        default
    >   Address:
    >   Default backend:  default-http-backend:80 (<error: endpoints "default-http-backend" not found>)
    >   TLS:
    >     tls-secret terminates gwerf.metagrid.xyz
    >   Rules:
    >     Host                Path  Backends
    >     ----                ----  --------
    >     gwerf.metagrid.xyz
    >                         /   http-svc:80 (10.100.4.48:8080)
    >   Annotations:          nginx.ingress.kubernetes.io/auth-response-headers: x-auth-request-user, x-auth-request-email
    >                         nginx.ingress.kubernetes.io/auth-signin: https://$host/cribnart/start?rd=$escaped_request_uri
    >                         nginx.ingress.kubernetes.io/auth-url: https://$host/cribnart/auth
    >   Events:
    >     Type    Reason  Age   From                      Message
    >     ----    ------  ----  ----                      -------
    >     Normal  CREATE  16s   nginx-ingress-controller  Ingress default/drupal-oauth-protected


    kubectl describe \
        ingress drupal-oauth-protector

    >   Name:             drupal-oauth-protector
    >   Namespace:        default
    >   Address:          128.232.227.125
    >   Default backend:  default-http-backend:80 (<error: endpoints "default-http-backend" not found>)
    >   TLS:
    >     tls-secret terminates gwerf.metagrid.xyz
    >   Rules:
    >     Host                Path  Backends
    >     ----                ----  --------
    >     gwerf.metagrid.xyz
    >                         /cribnart   drupal-oauth-proxy:4180 ()
    >   Annotations:          Events:
    >     Type                Reason  Age   From                      Message
    >     ----                ------  ----  ----                      -------
    >     Normal              CREATE  47s   nginx-ingress-controller  Ingress default/drupal-oauth-protector
    >     Normal              UPDATE  5s    nginx-ingress-controller  Ingress default/drupal-oauth-protector


# -----------------------------------------------------
# Test the deployment.
#[user@kubernator]

    curl --head --insecure "https://gwerf.metagrid.xyz/test"

    >   HTTP/2 500
    >   date: Fri, 11 Dec 2020 02:48:59 GMT
    >   content-type: text/html
    >   content-length: 170
    >   strict-transport-security: max-age=15724800; includeSubDomains


    curl --head --insecure "https://gwerf.metagrid.xyz/cribnart/auth"




# -----------------------------------------------------
# Watch the controller logs.
#[user@kubernator]

    kubectl \
        ingress-nginx \
            --namespace 'aglais-k8s-20201208' \
            --deployment 'aglais-ingress-nginx-controller' \
            logs \
                --follow \
                --tail 20

    >   ....
    >   ....
    >   2020/12/11 02:54:44 [error] 12482#12482: *11034609 auth request unexpected status: 503 while sending to client, client: 10.100.4.0, server: gwerf.metagrid.xyz, request: "HEAD /test HTTP/2.0", host: "gwerf.metagrid.xyz"
    >   10.100.2.1 - - [11/Dec/2020:02:54:44 +0000] "GET /cribnart/auth HTTP/1.1" 503 190 "-" "curl/7.69.1" 359 0.000 [default-drupal-oauth-proxy-4180] [] - - - - 4addaaa1889e698380286e1ef192dbf7
    >   10.100.4.0 - - [11/Dec/2020:02:54:44 +0000] "HEAD /test HTTP/2.0" 503 0 "-" "curl/7.69.1" 0 0.040 [default-http-svc-80] [] 128.232.227.125:443 0 0.003 503 4addaaa1889e698380286e1ef192dbf7
    >   10.100.4.0 - - [11/Dec/2020:02:54:44 +0000] "HEAD /test HTTP/2.0" 500 0 "-" "curl/7.69.1" 44 0.040 [default-http-svc-80] [] - - - - 4addaaa1889e698380286e1ef192dbf7
    >   ....
    >   ....
    >   W1211 03:11:57.995357       8 controller.go:937] Service "default/drupal-oauth-proxy" does not have any active Endpoint.
    >   ....


# -----------------------------------------------------
# Check the drupal-oauth-proxy components.
#[user@kubernator]

    kubectl \
        --namespace 'default' \
        describe service \
            drupal-oauth-proxy

    >   Name:              drupal-oauth-proxy
    >   Namespace:         default
    >   Labels:            k8s-app=drupal-oauth-proxy
    >   Annotations:       <none>
    >   Selector:          k8s-app=drupal-oauth-proxy
    >   Type:              ClusterIP
    >   IP:                10.254.26.82
    >   Port:              http  4180/TCP
    >   TargetPort:        4180/TCP
    >   Endpoints:
    >   Session Affinity:  None
    >   Events:            <none>


    kubectl \
        --namespace 'default' \
        describe deployment \
            drupal-oauth-proxy

    >   Name:                   drupal-oauth-proxy
    >   Namespace:              default
    >   CreationTimestamp:      Fri, 11 Dec 2020 02:45:52 +0000
    >   Labels:                 k8s-app=drupal-oauth-proxy
    >   Annotations:            deployment.kubernetes.io/revision: 1
    >   Selector:               k8s-app=drupal-oauth-proxy
    >   Replicas:               1 desired | 1 updated | 1 total | 0 available | 1 unavailable
    >   StrategyType:           RollingUpdate
    >   MinReadySeconds:        0
    >   RollingUpdateStrategy:  25% max unavailable, 25% max surge
    >   Pod Template:
    >     Labels:  k8s-app=drupal-oauth-proxy
    >     Containers:
    >      drupal-oauth-proxy:
    >       Image:      quay.io/oauth2-proxy/oauth2-proxy:latest
    >       Port:       4180/TCP
    >       Host Port:  0/TCP
    >       Args:
    >         --provider oidc
    >         --client-id drupal-oauth-proxy-ident
    >         --client-secret drupal-oauth-proxy-secret
    >         --redirect-url https://gwerf.metagrid.xyz/cribnart/callback
    >         --skip-oidc-discovery
    >         --login-url https://drupal.metagrid.xyz/oauth2/authenticate
    >         --cookie-secure=false
    >         --email-domain example.com
    >       Environment:  <none>
    >       Mounts:       <none>
    >     Volumes:        <none>
    >   Conditions:
    >     Type           Status  Reason
    >     ----           ------  ------
    >     Progressing    True    NewReplicaSetAvailable
    >     Available      False   MinimumReplicasUnavailable
    >   OldReplicaSets:  <none>
    >   NewReplicaSet:   drupal-oauth-proxy-746fb6f77f (1/1 replicas created)
    >   Events:
    >     Type    Reason             Age   From                   Message
    >     ----    ------             ----  ----                   -------
    >     Normal  ScalingReplicaSet  34m   deployment-controller  Scaled up replica set drupal-oauth-proxy-746fb6f77f to 1


    kubectl \
        --namespace 'default' \
        describe pod \
            drupal-oauth-proxy

    >   Name:         drupal-oauth-proxy-746fb6f77f-bslsh
    >   Namespace:    default
    >   Node:         aglais-k8s-20201208-cluster-p5qlctagesrg-node-2/10.0.0.40
    >   Start Time:   Fri, 11 Dec 2020 02:45:52 +0000
    >   Labels:       k8s-app=drupal-oauth-proxy
    >                 pod-template-hash=746fb6f77f
    >   Annotations:  <none>
    >   Status:       Running
    >   IP:           10.100.4.59
    >   IPs:
    >     IP:           10.100.4.59
    >   Controlled By:  ReplicaSet/drupal-oauth-proxy-746fb6f77f
    >   Containers:
    >     drupal-oauth-proxy:
    >       Container ID:  docker://b84771a160a4d84adb4ca169d4fbf076d309eb3c86ab135230478a9aa747e143
    >       Image:         quay.io/oauth2-proxy/oauth2-proxy:latest
    >       Image ID:      docker-pullable://quay.io/oauth2-proxy/oauth2-proxy@sha256:791aef35b8d1d2a325028b188d5a650605d69985a0dab1233c06079e7321eee0
    >       Port:          4180/TCP
    >       Host Port:     0/TCP
    >       Args:
    >         --provider oidc
    >         --client-id drupal-oauth-proxy-ident
    >         --client-secret drupal-oauth-proxy-secret
    >         --redirect-url https://gwerf.metagrid.xyz/cribnart/callback
    >         --skip-oidc-discovery
    >         --login-url https://drupal.metagrid.xyz/oauth2/authenticate
    >         --cookie-secure=false
    >         --email-domain example.com
    >       State:          Waiting
    >         Reason:       CrashLoopBackOff
    >       Last State:     Terminated
    >         Reason:       Error
    >         Exit Code:    2
    >         Started:      Fri, 11 Dec 2020 03:22:31 +0000
    >         Finished:     Fri, 11 Dec 2020 03:22:31 +0000
    >       Ready:          False
    >       Restart Count:  12
    >       Environment:    <none>
    >       Mounts:
    >         /var/run/secrets/kubernetes.io/serviceaccount from default-token-bd75n (ro)
    >   Conditions:
    >     Type              Status
    >     Initialized       True
    >     Ready             False
    >     ContainersReady   False
    >     PodScheduled      True
    >   Volumes:
    >     default-token-bd75n:
    >       Type:        Secret (a volume populated by a Secret)
    >       SecretName:  default-token-bd75n
    >       Optional:    false
    >   QoS Class:       BestEffort
    >   Node-Selectors:  <none>
    >   Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s
    >                    node.kubernetes.io/unreachable:NoExecute for 300s
    >   Events:
    >     Type     Reason     Age                   From                                                      Message
    >     ----     ------     ----                  ----                                                      -------
    >     Normal   Scheduled  <unknown>             default-scheduler                                         Successfully assigned default/drupal-oauth-proxy-746fb6f77f-bslsh to aglais-k8s-20201208-cluster-p5qlctagesrg-node-2
    >     Normal   Created    36m (x4 over 37m)     kubelet, aglais-k8s-20201208-cluster-p5qlctagesrg-node-2  Created container drupal-oauth-proxy
    >     Normal   Started    36m (x4 over 37m)     kubelet, aglais-k8s-20201208-cluster-p5qlctagesrg-node-2  Started container drupal-oauth-proxy
    >     Normal   Pulling    35m (x5 over 37m)     kubelet, aglais-k8s-20201208-cluster-p5qlctagesrg-node-2  Pulling image "quay.io/oauth2-proxy/oauth2-proxy:latest"
    >     Normal   Pulled     35m (x5 over 37m)     kubelet, aglais-k8s-20201208-cluster-p5qlctagesrg-node-2  Successfully pulled image "quay.io/oauth2-proxy/oauth2-proxy:latest"
    >     Warning  BackOff    115s (x163 over 37m)  kubelet, aglais-k8s-20201208-cluster-p5qlctagesrg-node-2  Back-off restarting failed container


    kubectl \
        --namespace 'default' \
        logs \
            drupal-oauth-proxy-746fb6f77f-bslsh

    >   unknown flag: --provider oidc
    >   Usage of oauth2-proxy:
    >   unknown flag: --provider oidc






