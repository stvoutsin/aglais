#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2021, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#

    Target:

        New deployment using latest Zeppelin images.

    Result:

        Work in progress ...


# -----------------------------------------------------
# Update the project name.
#[user@desktop]

    cloudname=gaia-prod

    sed -i '
        s/^\(AGLAIS_CLOUD\)=.*$/\1='${cloudname:?}'/
        ' "${HOME}/aglais.env"


# -----------------------------------------------------
# Modify the Zeppelin image version in our Helm charts.
#[user@desktop]

    buildtag=20210112-142531-debian-9-java-8

    source "${HOME:?}/aglais.env"
    pushd "${AGLAIS_CODE:?}"

        sed -i '
            s/^\(zeppelin_server_image\):.*$/\1: "aglais\/zeppelin-dev:'${buildtag:?}'"/
            s/^\(zeppelin_worker_image\):.*$/\1: "aglais\/zeppelin-dev:'${buildtag:?}'"/
            ' experiments/kubernetes/helm/tools/zeppelin/values.yaml

    popd


# -----------------------------------------------------
# Create a new container to work with.
#[user@desktop]

    source "${HOME:?}/aglais.env"

    podman run \
        --rm \
        --tty \
        --interactive \
        --name kubernator \
        --hostname kubernator \
        --env "cloudname=${AGLAIS_CLOUD:?}" \
        --volume "${HOME:?}/clouds.yaml:/etc/openstack/clouds.yaml:ro,z" \
        --volume "${AGLAIS_CODE:?}/experiments/openstack:/openstack:ro,z" \
        --volume "${AGLAIS_CODE:?}/experiments/kubernetes:/kubernetes:rw,z" \
        atolmis/openstack-client:latest \
        bash


# -----------------------------------------------------
# Delete everything.
#[root@kubernator]

    /openstack/bin/delete-all.sh \
        "${cloudname:?}"

    >   ....
    >   ....


# -----------------------------------------------------
# Run the main Kubernetes deployment.
#[root@kubernator]

    buildname="aglais-$(date '+%Y%m%d')"
    namespace=${buildname,,}

    /kubernetes/bin/create-all.sh \
        "${cloudname:?}" \
        "${buildname:?}" \
        "${namespace:?}"

    >   ....
    >   ....
    >   Installing dashboard Helm chart
    >   Namespace [aglais-20210112]
    >   Dash host [valeria.metagrid.xyz]
    >   Getting updates for unmanaged Helm repositories...
    >   ...Successfully got an update from the "https://kubernetes.github.io/dashboard" chart repository
    >   Saving 1 charts
    >   Downloading kubernetes-dashboard from repo https://kubernetes.github.io/dashboard
    >   Deleting outdated charts
    >   Release "aglais-dashboard" does not exist. Installing it now.
    >   NAME: aglais-dashboard
    >   LAST DEPLOYED: Tue Jan 12 15:17:15 2021
    >   NAMESPACE: aglais-20210112
    >   STATUS: deployed
    >   REVISION: 1
    >   TEST SUITE: None
    >   ....
    >   ....

    #
    # Dashboard installed with no errors today.
    #


# -----------------------------------------------------
# Get the ServiceAccount token.
#[root@kubernator]

    secretname=$(
        kubectl \
            --output json \
            --namespace "${namespace:?}" \
            get ServiceAccount \
                "aglais-dashboard-kubernetes-dashboard" \
        | jq -r '.secrets[0].name'
        )

    kubectl \
        --output json \
        --namespace "${namespace:?}" \
        get Secret \
            "${secretname:?}" \
    | jq -r '.data.token | @base64d'


    >   ....
    >   ....


# -----------------------------------------------------
# Get the Ingress address.
#[root@kubernator]

    kubectl \
        --namespace "${namespace:?}" \
        get Ingress

    >   NAME                                    HOSTS                   ADDRESS           PORTS     AGE
    >   aglais-dashboard-kubernetes-dashboard   valeria.metagrid.xyz    128.232.227.247   80        5m2s
    >   zeppelin-server-ingress                 zeppelin.metagrid.xyz   128.232.227.247   80, 443   4m7s


# -----------------------------------------------------
# -----------------------------------------------------

    #
    # Update our DNS ..
    #


# -----------------------------------------------------
# Check the Dashboard page.
#[root@kubernator]

    curl --head --insecure "https://valeria.metagrid.xyz/"

    >   HTTP/2 200
    >   date: Tue, 12 Jan 2021 15:23:28 GMT
    >   content-type: text/html; charset=utf-8
    >   content-length: 1272
    >   accept-ranges: bytes
    >   cache-control: no-store
    >   last-modified: Thu, 03 Sep 2020 14:10:18 GMT
    >   strict-transport-security: max-age=15724800; includeSubDomains


# -----------------------------------------------------
# Check the Zeppelin page.
#[root@kubernator]

    curl --head --insecure "https://zeppelin.metagrid.xyz/"

    >   HTTP/2 200
    >   date: Tue, 12 Jan 2021 15:23:46 GMT
    >   content-type: text/html
    >   content-length: 4660
    >   access-control-allow-credentials: true
    >   access-control-allow-headers: authorization,Content-Type
    >   access-control-allow-methods: POST, GET, OPTIONS, PUT, HEAD, DELETE
    >   x-frame-options: SAMEORIGIN
    >   x-xss-protection: 1; mode=block
    >   x-content-type-options: nosniff
    >   last-modified: Sat, 26 Dec 2020 19:42:42 GMT
    >   accept-ranges: bytes
    >   strict-transport-security: max-age=15724800; includeSubDomains


# -----------------------------------------------------
# -----------------------------------------------------
# Login to Dashboard and test ...
#[user@desktop]

    firefox --new-window "https://valeria.metagrid.xyz/" &

        #
        # Looks good.
        # We can login and examine Pods etc.
        # TODO fix permissions for the Dashboard account.
        #

# -----------------------------------------------------
# Login to Zeppelin and test ...
#[user@desktop]

    firefox --new-window "https://zeppelin.metagrid.xyz/" &

        #
        # Shiro user accounts don't seem to work :-(
        #

# -----------------------------------------------------
# Check the Shiro user accounts are configured.
#[root@kubernator]

    kubectl \
        --namespace "${namespace:?}" \
        get Pods

    >   NAME                                                     READY   STATUS    RESTARTS   AGE
    >   ....
    >   zeppelin-server-deploy-7cb7f54d5c-rkxmd                  3/3     Running   0          12m


    kubectl \
        --namespace "${namespace:?}" \
        exec \
            --tty \
            --stdin \
            'zeppelin-server-deploy-7cb7f54d5c-rkxmd' \
            -- \
                bash


    less /zeppelin/conf/shiro.ini

    >   ....
    >   [users]
    >   # List of users with their password allowed to access Zeppelin.
    >   # To use a different strategy (LDAP / Database / ...) check the shiro doc at http://shiro.apache.org/configuration.html#Configuration-INISections
    >   # To enable admin user, uncomment the following line and set an appropriate password.
    >   #admin = password1, admin
    >   user1 = xxxxxxxx
    >   user2 = xxxxxxxx, role2
    >   user3 = xxxxxxxx, admin
    >   ....


# -----------------------------------------------------
# Refresh the browser page, login to Zeppelin and test ...
#[user@desktop]

    firefox --new-window "https://zeppelin.metagrid.xyz/" &

        #
        # Shiro user accounts work OK :-)
        # Takes time for a new deployment to replace the old one !?
        #



# -----------------------------------------------------
# -----------------------------------------------------
# Mount each of the external catalogs in Spark.
#[user@zeppelin]

# --------------------------------
%spark.conf

spark.kubernetes.executor.volumes.persistentVolumeClaim.aglais-gaia-dr2.mount.path        /data/gaia/dr2
spark.kubernetes.executor.volumes.persistentVolumeClaim.aglais-gaia-dr2.mount.readOnly    true
spark.kubernetes.executor.volumes.persistentVolumeClaim.aglais-gaia-dr2.options.claimName aglais-gaia-dr2-claim

spark.kubernetes.executor.volumes.persistentVolumeClaim.aglais-gaia-edr3.mount.path        /data/gaia/edr3
spark.kubernetes.executor.volumes.persistentVolumeClaim.aglais-gaia-edr3.mount.readOnly    true
spark.kubernetes.executor.volumes.persistentVolumeClaim.aglais-gaia-edr3.options.claimName aglais-gaia-edr3-claim

spark.kubernetes.executor.volumes.persistentVolumeClaim.aglais-wise-allwise.mount.path        /data/wise/allwise
spark.kubernetes.executor.volumes.persistentVolumeClaim.aglais-wise-allwise.mount.readOnly    true
spark.kubernetes.executor.volumes.persistentVolumeClaim.aglais-wise-allwise.options.claimName aglais-wise-allwise-claim

spark.kubernetes.executor.volumes.persistentVolumeClaim.aglais-panstarrs-dr1.mount.path        /data/panstarrs/dr1
spark.kubernetes.executor.volumes.persistentVolumeClaim.aglais-panstarrs-dr1.mount.readOnly    true
spark.kubernetes.executor.volumes.persistentVolumeClaim.aglais-panstarrs-dr1.options.claimName aglais-panstarrs-dr1-claim

spark.kubernetes.executor.volumes.persistentVolumeClaim.aglais-twomass-allsky.mount.path        /data/twomass/allsky
spark.kubernetes.executor.volumes.persistentVolumeClaim.aglais-twomass-allsky.mount.readOnly    true
spark.kubernetes.executor.volumes.persistentVolumeClaim.aglais-twomass-allsky.options.claimName aglais-twomass-allsky-claim


# --------------------------------
%spark.pyspark

gaia_dr2 = sqlContext.read.parquet(
    "/data/gaia/dr2"
    )

print("gaia-dr2 count: ",      gaia_dr2.count())
print("gaia-dr2 partitions: ", gaia_dr2.rdd.getNumPartitions())

    >   gaia-dr2 count:  1692919135
    >   gaia-dr2 partitions:  5985


# --------------------------------
%spark.pyspark

gaia_edr3 = sqlContext.read.parquet(
    "/data/gaia/edr3"
    )

print("gaia-edr3 count: ",      gaia_edr3.count())
print("gaia-edr3 partitions: ", gaia_edr3.rdd.getNumPartitions())

    >   gaia-edr3 count:  1811709771
    >   gaia-edr3 partitions:  5720


# --------------------------------
%spark.pyspark

wise = sqlContext.read.parquet(
    "/data/wise/allwise"
    )

print("wise-allwise count: ",      wise.count())
print("wise-allwise partitions: ", wise.rdd.getNumPartitions())

    >   wise-allwise count:  747634026
    >   wise-allwise partitions:  3059


# --------------------------------
%spark.pyspark

panstarrs = sqlContext.read.parquet(
    "/data/panstarrs/dr1"
    )

print("panstarrs-dr1 count: ",      panstarrs.count())
print("panstarrs-dr1 partitions: ", panstarrs.rdd.getNumPartitions())

    >   panstarrs-dr1 count:  1919106885
    >   panstarrs-dr1 partitions:  2553


# --------------------------------
%spark.pyspark

twomass = sqlContext.read.parquet(
    "/data/twomass/allsky"
    )

print("twomass-allsky count: ",      twomass.count())
print("twomass-allsky partitions: ", twomass.rdd.getNumPartitions())

    >   twomass-allsky count:  470992970
    >   twomass-allsky partitions:  385


